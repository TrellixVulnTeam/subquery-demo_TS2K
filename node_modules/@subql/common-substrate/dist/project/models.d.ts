import { RegisteredTypes, RegistryTypes, OverrideModuleType, OverrideBundleType } from '@polkadot/types/types';
import { BaseMapping, FileReference } from '@subql/common';
import { SubstrateCustomDataSourceAsset, SubstrateBlockFilter, SubstrateBlockHandler, SubstrateCallFilter, SubstrateCallHandler, SubstrateCustomHandler, SubstrateDatasourceKind, SubstrateEventFilter, SubstrateEventHandler, SubstrateHandlerKind, SubstrateNetworkFilter, SubstrateRuntimeDataSource, SubstrateRuntimeHandler, SubstrateRuntimeHandlerFilter, SubstrateCustomDataSource } from './types';
export declare class BlockFilter implements SubstrateBlockFilter {
    specVersion?: [number, number];
}
export declare class EventFilter extends BlockFilter implements SubstrateEventFilter {
    module?: string;
    method?: string;
}
export declare class ChainTypes implements RegisteredTypes {
    types?: RegistryTypes;
    typesAlias?: Record<string, OverrideModuleType>;
    typesBundle?: OverrideBundleType;
    typesChain?: Record<string, RegistryTypes>;
    typesSpec?: Record<string, RegistryTypes>;
}
export declare class CallFilter extends EventFilter implements SubstrateCallFilter {
    success?: boolean;
}
export declare class BlockHandler implements SubstrateBlockHandler {
    filter?: SubstrateBlockFilter;
    kind: SubstrateHandlerKind.Block;
    handler: string;
}
export declare class CallHandler implements SubstrateCallHandler {
    filter?: SubstrateCallFilter;
    kind: SubstrateHandlerKind.Call;
    handler: string;
}
export declare class EventHandler implements SubstrateEventHandler {
    filter?: SubstrateEventFilter;
    kind: SubstrateHandlerKind.Event;
    handler: string;
}
export declare class CustomHandler implements SubstrateCustomHandler {
    kind: string;
    handler: string;
    filter?: Record<string, unknown>;
}
export declare class RuntimeMapping implements BaseMapping<SubstrateRuntimeHandlerFilter, SubstrateRuntimeHandler> {
    handlers: SubstrateRuntimeHandler[];
    file: string;
}
export declare class CustomMapping implements BaseMapping<Record<string, unknown>, SubstrateCustomHandler> {
    handlers: CustomHandler[];
    file: string;
}
export declare class SubqlNetworkFilterImpl implements SubstrateNetworkFilter {
    specName?: string;
}
export declare class RuntimeDataSourceBase implements SubstrateRuntimeDataSource {
    kind: SubstrateDatasourceKind.Runtime;
    mapping: RuntimeMapping;
    startBlock?: number;
    filter?: SubstrateNetworkFilter;
}
export declare class FileReferenceImpl implements FileReference {
    file: string;
}
export declare class CustomDataSourceBase<K extends string, T extends SubstrateNetworkFilter, M extends CustomMapping, O = any> implements SubstrateCustomDataSource<K, T, O> {
    kind: K;
    mapping: M;
    startBlock?: number;
    assets: Map<string, SubstrateCustomDataSourceAsset>;
    processor: FileReference;
    filter?: T;
}
