{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/project/types.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAOtC,IAAY,uBAEX;AAFD,WAAY,uBAAuB;IACjC,wDAA6B,CAAA;AAC/B,CAAC,EAFW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAElC;AAED,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,wDAAgC,CAAA;IAChC,sDAA8B,CAAA;IAC9B,wDAAgC,CAAA;AAClC,CAAC,EAJW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAI/B","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ApiPromise} from '@polkadot/api';\nimport {FileReference, BaseDataSource, BaseHandler, IProjectManifest, ProjectNetworkConfig} from '@subql/common';\nimport {SubstrateBlock, SubstrateEvent, SubstrateExtrinsic} from '@subql/types';\nimport {RuntimeDataSourceV0_0_1} from '../project/versioned/v0_0_1';\n\nexport enum SubstrateDatasourceKind {\n  Runtime = 'substrate/Runtime',\n}\n\nexport enum SubstrateHandlerKind {\n  Block = 'substrate/BlockHandler',\n  Call = 'substrate/CallHandler',\n  Event = 'substrate/EventHandler',\n}\n\nexport type SubstrateRuntimeHandlerInputMap = {\n  [SubstrateHandlerKind.Block]: SubstrateBlock;\n  [SubstrateHandlerKind.Event]: SubstrateEvent;\n  [SubstrateHandlerKind.Call]: SubstrateExtrinsic;\n};\n\ntype SubstrateRuntimeFilterMap = {\n  [SubstrateHandlerKind.Block]: SubstrateNetworkFilter;\n  [SubstrateHandlerKind.Event]: SubstrateEventFilter;\n  [SubstrateHandlerKind.Call]: SubstrateCallFilter;\n};\n\n//make exception for runtime datasource 0.0.1\nexport type ISubstrateProjectManifest = IProjectManifest<SubstrateDataSource | RuntimeDataSourceV0_0_1>;\n\nexport interface SubstrateProjectNetworkConfig extends ProjectNetworkConfig {\n  genesisHash?: string;\n  chainId?: string;\n}\n\nexport type SpecVersionRange = [number, number];\n\n//Record<string,unknown>\n\ninterface SubstrateBaseHandlerFilter {\n  specVersion?: SpecVersionRange;\n}\n\nexport type SubstrateBlockFilter = SubstrateBaseHandlerFilter;\n\nexport interface SubstrateEventFilter extends SubstrateBaseHandlerFilter {\n  module?: string;\n  method?: string;\n}\n\nexport interface SubstrateCallFilter extends SubstrateEventFilter {\n  success?: boolean;\n}\n\nexport type SubstrateRuntimeHandlerFilter = SubstrateBlockFilter | SubstrateCallFilter | SubstrateEventFilter;\n\nexport interface SubstrateBlockHandler extends BaseHandler<SubstrateBlockFilter> {\n  kind: SubstrateHandlerKind.Block;\n}\n\nexport interface SubstrateCallHandler extends BaseHandler<SubstrateCallFilter> {\n  kind: SubstrateHandlerKind.Call;\n}\n\nexport interface SubstrateEventHandler extends BaseHandler<SubstrateEventFilter> {\n  kind: SubstrateHandlerKind.Event;\n}\n\nexport type SubstrateHandler = SubstrateRuntimeHandler | SubstrateCustomHandler;\n\nexport type SubstrateRuntimeHandler = SubstrateBlockHandler | SubstrateCallHandler | SubstrateEventHandler;\n\nexport type SubstrateCustomHandler = BaseHandler<Record<string, unknown>>;\n\nexport interface SubstrateNetworkFilter {\n  specName?: string;\n}\n\nexport type SubstrateDataSource = SubstrateRuntimeDataSource | SubstrateCustomDataSource; // | SubqlBuiltinDataSource;\n\nexport type SubstrateCustomDataSourceAsset = FileReference;\n\nexport interface SubstrateRuntimeDataSource\n  extends BaseDataSource<SubstrateRuntimeHandlerFilter, SubstrateRuntimeHandler> {\n  kind: SubstrateDatasourceKind.Runtime;\n  filter?: SubstrateNetworkFilter; //keep network filter for v0.0.1\n}\n\nexport type Processor<O = any> = FileReference & {options?: O};\n\nexport interface SubstrateCustomDataSource<\n  K extends string = string,\n  T extends SubstrateNetworkFilter = SubstrateNetworkFilter,\n  O = any\n> extends BaseDataSource {\n  filter?: T;\n  kind: K;\n  assets: Map<string, SubstrateCustomDataSourceAsset>;\n  processor?: Processor<O>;\n}\n\nexport interface HandlerInputTransformer<\n  T extends SubstrateHandlerKind,\n  U,\n  DS extends SubstrateCustomDataSource = SubstrateCustomDataSource\n> {\n  (original: SubstrateRuntimeHandlerInputMap[T], ds: DS, api: ApiPromise, assets: Record<string, string>): Promise<U>; //  | SubqlBuiltinDataSource\n}\n\n///\nexport interface SubstrateDatasourceProcessor<\n  K extends string,\n  F extends SubstrateNetworkFilter,\n  DS extends SubstrateCustomDataSource<K, F> = SubstrateCustomDataSource<K, F>\n> {\n  kind: K;\n  validate(ds: DS, assets: Record<string, string>): void;\n  dsFilterProcessor(ds: DS, api: ApiPromise): boolean;\n  handlerProcessors: {[kind: string]: SecondLayerHandlerProcessor<SubstrateHandlerKind, unknown, unknown, DS>};\n}\n\nexport interface DictionaryQueryCondition {\n  field: string;\n  value: string;\n}\n\nexport interface DictionaryQueryEntry {\n  entity: string;\n  conditions: DictionaryQueryCondition[];\n}\n\n// only allow one custom handler for each baseHandler kind\nexport interface SecondLayerHandlerProcessor<\n  K extends SubstrateHandlerKind,\n  F,\n  E,\n  DS extends SubstrateCustomDataSource = SubstrateCustomDataSource\n> {\n  baseHandlerKind: K;\n  baseFilter: SubstrateRuntimeFilterMap[K] | SubstrateRuntimeFilterMap[K][];\n  transformer: HandlerInputTransformer<K, E, DS>;\n  filterProcessor: (filter: F | undefined, input: SubstrateRuntimeHandlerInputMap[K], ds: DS) => boolean;\n  filterValidator: (filter: F) => void;\n  dictionaryQuery?: (filter: F, ds: DS) => DictionaryQueryEntry;\n}\n"]}