{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/project/utils.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,4CAAoB;AACpB,gDAAwB;AAExB,8DAAqC;AACrC,mCAAwC;AAEjC,KAAK,UAAU,iBAAiB,CAAC,SAAiB,EAAE,KAAK,GAAG,EAAE;IACnE,KAAK,IAAI,IAAI,GAAG,SAAS,EAAE,IAAI,IAAI,SAAS,GAAG,KAAK,EAAE,IAAI,EAAE,EAAE;QAC5D,IAAI;YACF,MAAM,KAAK,GAAG,MAAM,IAAA,qBAAU,EAAC,IAAI,CAAC,CAAC;YACrC,IAAI,KAAK,KAAK,IAAI,EAAE;gBAClB,OAAO,IAAI,CAAC;aACb;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,IAAI,CAAC;SACb;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAbD,8CAaC;AAOD,6DAA6D;AAC7D,sDAAsD;AACtD,SAAgB,yBAAyB,CAAC,QAAgB;IACxD,MAAM,OAAO,GAAG,EAA4B,CAAC;IAC7C,MAAM,KAAK,GAAG,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACpC,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;QACvB,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;QACxB,OAAO,CAAC,QAAQ,GAAG,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;KAC3D;SAAM,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE;QACzB,MAAM,EAAC,GAAG,EAAC,GAAG,cAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC;QACnB,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC7B;IACD,OAAO,CAAC,IAAI,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC1C,OAAO,OAAO,CAAC;AACjB,CAAC;AAbD,8DAaC;AAED,SAAgB,cAAc,CAAC,OAAe,EAAE,QAAgB;IAC9D,OAAO,IAAA,kBAAS,EAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACtC,CAAC;AAFD,wCAEC;AAED,MAAa,sBAAsB;IACjC,QAAQ,CAAC,KAAgC;QACvC,MAAM,SAAS,GAAG,IAAA,cAAK,EAAC,KAAK,EAAE,EAAC,iBAAiB,EAAE,KAAK,EAAC,CAAC,CAAC;QAC3D,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;YACjD,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,cAAc;QACZ,OAAO,yCAAyC,CAAC;IACnD,CAAC;CACF;AAXD,wDAWC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {ValidatorConstraintInterface} from 'class-validator';\nimport detectPort from 'detect-port';\nimport {satisfies, valid} from 'semver';\n\nexport async function findAvailablePort(startPort: number, range = 10): Promise<number> {\n  for (let port = startPort; port <= startPort + range; port++) {\n    try {\n      const _port = await detectPort(port);\n      if (_port === port) {\n        return port;\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nexport interface ProjectRootAndManifest {\n  root: string;\n  manifest: string;\n}\n\n// --subquery -f pass in can be project.yaml or project.path,\n// use this to determine its project root and manifest\nexport function getProjectRootAndManifest(subquery: string): ProjectRootAndManifest {\n  const project = {} as ProjectRootAndManifest;\n  const stats = fs.statSync(subquery);\n  if (stats.isDirectory()) {\n    project.root = subquery;\n    project.manifest = path.resolve(subquery, 'project.yaml');\n  } else if (stats.isFile()) {\n    const {dir} = path.parse(subquery);\n    project.root = dir;\n    project.manifest = subquery;\n  }\n  project.root = path.resolve(project.root);\n  return project;\n}\n\nexport function validateSemver(current: string, required: string) {\n  return satisfies(current, required);\n}\n\nexport class SemverVersionValidator implements ValidatorConstraintInterface {\n  validate(value: string | null | undefined): boolean {\n    const validated = valid(value, {includePrerelease: false});\n    if (validated === null || validated === undefined) {\n      return false;\n    }\n    return true;\n  }\n  defaultMessage(): string {\n    return 'Version number must follow Semver rules';\n  }\n}\n"]}