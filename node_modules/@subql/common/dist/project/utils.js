"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemverVersionValidator = exports.validateSemver = exports.getProjectRootAndManifest = exports.findAvailablePort = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const detect_port_1 = __importDefault(require("detect-port"));
const semver_1 = require("semver");
async function findAvailablePort(startPort, range = 10) {
    for (let port = startPort; port <= startPort + range; port++) {
        try {
            const _port = await (0, detect_port_1.default)(port);
            if (_port === port) {
                return port;
            }
        }
        catch (e) {
            return null;
        }
    }
    return null;
}
exports.findAvailablePort = findAvailablePort;
// --subquery -f pass in can be project.yaml or project.path,
// use this to determine its project root and manifest
function getProjectRootAndManifest(subquery) {
    const project = {};
    const stats = fs_1.default.statSync(subquery);
    if (stats.isDirectory()) {
        project.root = subquery;
        project.manifest = path_1.default.resolve(subquery, 'project.yaml');
    }
    else if (stats.isFile()) {
        const { dir } = path_1.default.parse(subquery);
        project.root = dir;
        project.manifest = subquery;
    }
    project.root = path_1.default.resolve(project.root);
    return project;
}
exports.getProjectRootAndManifest = getProjectRootAndManifest;
function validateSemver(current, required) {
    return (0, semver_1.satisfies)(current, required);
}
exports.validateSemver = validateSemver;
class SemverVersionValidator {
    validate(value) {
        const validated = (0, semver_1.valid)(value, { includePrerelease: false });
        if (validated === null || validated === undefined) {
            return false;
        }
        return true;
    }
    defaultMessage() {
        return 'Version number must follow Semver rules';
    }
}
exports.SemverVersionValidator = SemverVersionValidator;
//# sourceMappingURL=utils.js.map